import React, { useState } from 'react';
import { 
  Box, 
  Typography, 
  Paper,
  Grid,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
  CardActions,
  Divider,
  Chip,
  IconButton,
  Tabs,
  Tab,
  CircularProgress
} from '@mui/material';
import { styled } from '@mui/material/styles';
import {
  ContentCopy as ContentCopyIcon,
  Download as DownloadIcon,
  Send as SendIcon,
  Refresh as RefreshIcon,
  Instagram as InstagramIcon,
  Facebook as FacebookIcon,
  Twitter as TwitterIcon,
  LinkedIn as LinkedInIcon,
  Email as EmailIcon,
  Article as ArticleIcon
} from '@mui/icons-material';

// Componentes estilizados
const ContentContainer = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  backgroundColor: theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  boxShadow: '0px 4px 20px rgba(0, 0, 0, 0.25)',
  height: 'calc(100vh - 180px)',
  overflow: 'auto'
}));

const PlatformCard = styled(Card)(({ theme, selected }) => ({
  backgroundColor: selected ? alpha(theme.palette.primary.main, 0.1) : theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  cursor: 'pointer',
  transition: 'all 0.2s ease-in-out',
  border: selected ? `2px solid ${theme.palette.primary.main}` : `1px solid ${theme.palette.divider}`,
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: '0px 8px 20px rgba(0, 0, 0, 0.15)'
  }
}));

const ContentPreview = styled(Box)(({ theme }) => ({
  backgroundColor: theme.palette.background.default,
  borderRadius: theme.shape.borderRadius,
  padding: theme.spacing(2),
  border: `1px solid ${theme.palette.divider}`,
  minHeight: '200px'
}));

// Fun√ß√£o auxiliar para alpha
const alpha = (color, opacity) => {
  return color + opacity.toString(16).padStart(2, '0');
};

// Dados simulados
const platformOptions = [
  { id: 'instagram', name: 'Instagram', icon: <InstagramIcon /> },
  { id: 'facebook', name: 'Facebook', icon: <FacebookIcon /> },
  { id: 'twitter', name: 'Twitter', icon: <TwitterIcon /> },
  { id: 'linkedin', name: 'LinkedIn', icon: <LinkedInIcon /> },
  { id: 'email', name: 'Email', icon: <EmailIcon /> },
  { id: 'blog', name: 'Blog', icon: <ArticleIcon /> }
];

const contentTypeOptions = [
  { id: 'post', name: 'Post' },
  { id: 'story', name: 'Story' },
  { id: 'ad', name: 'An√∫ncio' },
  { id: 'newsletter', name: 'Newsletter' },
  { id: 'article', name: 'Artigo' }
];

const toneOptions = [
  { id: 'professional', name: 'Profissional' },
  { id: 'casual', name: 'Casual' },
  { id: 'enthusiastic', name: 'Entusiasmado' },
  { id: 'informative', name: 'Informativo' },
  { id: 'persuasive', name: 'Persuasivo' }
];

// Conte√∫do gerado simulado
const generatedContent = {
  instagram: {
    post: "üöÄ Transforme sua presen√ßa digital com estrat√©gias que realmente funcionam! A FlowOFF combina abordagens tradicionais com inova√ß√µes Web3 para resultados extraordin√°rios. Nosso m√©todo Flow 360 integra m√∫ltiplos canais para maximizar seu alcance e engajamento. Quer saber como podemos impulsionar sua marca? Link na bio! #MarketingDigital #Web3 #Estrat√©gia #FlowOFF",
    story: "Deslize para cima e descubra como a FlowOFF est√° revolucionando o marketing digital com nossa abordagem Flow 360! ‚ú® Resultados reais. Estrat√©gias inovadoras. Crescimento sustent√°vel."
  },
  facebook: {
    post: "Sua estrat√©gia digital est√° gerando os resultados que voc√™ espera?\n\nNa FlowOFF, combinamos t√©cnicas comprovadas de marketing com as mais recentes inova√ß√µes em Web3 para criar campanhas verdadeiramente eficazes.\n\nNosso m√©todo exclusivo Flow 360 integra m√∫ltiplos canais digitais em uma estrat√©gia coesa, maximizando seu alcance e convers√£o.\n\nQuer saber como podemos transformar sua presen√ßa digital? Entre em contato hoje mesmo para uma consulta gratuita!",
    ad: "TRANSFORME SUA PRESEN√áA DIGITAL | Estrat√©gias personalizadas que geram resultados reais. A FlowOFF combina marketing tradicional com Web3 para impulsionar seu neg√≥cio. Clique e saiba mais!"
  }
};

const ContentGenerator = () => {
  const [selectedPlatform, setSelectedPlatform] = useState('instagram');
  const [contentType, setContentType] = useState('post');
  const [tone, setTone] = useState('professional');
  const [topic, setTopic] = useState('');
  const [keywords, setKeywords] = useState('');
  const [targetAudience, setTargetAudience] = useState('');
  const [contentLength, setContentLength] = useState('medium');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedText, setGeneratedText] = useState('');
  const [tabValue, setTabValue] = useState(0);
  
  const handlePlatformSelect = (platform) => {
    setSelectedPlatform(platform);
    // Resetar tipo de conte√∫do se n√£o estiver dispon√≠vel para a plataforma
    if (platform === 'twitter' && contentType === 'article') {
      setContentType('post');
    }
  };
  
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  const handleGenerateContent = () => {
    setIsGenerating(true);
    
    // Simular gera√ß√£o de conte√∫do
    setTimeout(() => {
      // Verificar se temos conte√∫do simulado para esta combina√ß√£o
      if (generatedContent[selectedPlatform] && generatedContent[selectedPlatform][contentType]) {
        setGeneratedText(generatedContent[selectedPlatform][contentType]);
      } else {
        // Conte√∫do gen√©rico simulado
        setGeneratedText(`Conte√∫do ${contentType} para ${selectedPlatform} sobre ${topic || 'marketing digital'}.\n\nEste √© um exemplo de conte√∫do gerado automaticamente com tom ${tone} para o p√∫blico ${targetAudience || 'geral'}.\n\nPalavras-chave: ${keywords || 'marketing, digital, estrat√©gia, web3'}`);
      }
      
      setIsGenerating(false);
    }, 2000);
  };
  
  const handleCopyContent = () => {
    navigator.clipboard.writeText(generatedText);
    // Aqui voc√™ poderia adicionar uma notifica√ß√£o de sucesso
  };
  
  const handleDownloadContent = () => {
    const element = document.createElement('a');
    const file = new Blob([generatedText], {type: 'text/plain'});
    element.href = URL.createObjectURL(file);
    element.download = `conteudo_${selectedPlatform}_${contentType}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };
  
  return (
    <Box sx={{ flexGrow: 1, py: 2 }}>
      <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 'bold', mb: 4 }}>
        Gera√ß√£o de Conte√∫do
      </Typography>
      
      <Tabs value={tabValue} onChange={handleTabChange} aria-label="content generator tabs" sx={{ mb: 3 }}>
        <Tab label="Gerar Conte√∫do" />
        <Tab label="Hist√≥rico" />
      </Tabs>
      
      {tabValue === 0 && (
        <ContentContainer>
          <Grid container spacing={3}>
            {/* Sele√ß√£o de plataforma */}
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                Plataforma
              </Typography>
              <Grid container spacing={2}>
                {platformOptions.map((platform) => (
                  <Grid item xs={6} sm={4} md={2} key={platform.id}>
                    <PlatformCard 
                      selected={selectedPlatform === platform.id}
                      onClick={() => handlePlatformSelect(platform.id)}
                    >
                      <CardContent sx={{ textAlign: 'center', py: 2 }}>
                        <Box sx={{ fontSize: 40, mb: 1 }}>
                          {platform.icon}
                        </Box>
                        <Typography variant="subtitle1">
                          {platform.name}
                        </Typography>
                      </CardContent>
                    </PlatformCard>
                  </Grid>
                ))}
              </Grid>
            </Grid>
            
            {/* Configura√ß√µes de conte√∫do */}
            <Grid item xs={12} md={6}>
              <Typography variant="h6" gutterBottom>
                Configura√ß√µes
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth variant="outlined">
                    <InputLabel>Tipo de Conte√∫do</InputLabel>
                    <Select
                      value={contentType}
                      onChange={(e) => setContentType(e.target.value)}
                      label="Tipo de Conte√∫do"
                    >
                      {contentTypeOptions.map((type) => (
                        <MenuItem 
                          key={type.id} 
                          value={type.id}
                          disabled={
                            (selectedPlatform === 'twitter' && type.id === 'article') ||
                            (selectedPlatform === 'instagram' && type.id === 'newsletter')
                          }
                        >
                          {type.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth variant="outlined">
                    <InputLabel>Tom</InputLabel>
                    <Select
                      value={tone}
                      onChange={(e) => setTone(e.target.value)}
                      label="Tom"
                    >
                      {toneOptions.map((tone) => (
                        <MenuItem key={tone.id} value={tone.id}>
                          {tone.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="T√≥pico/Assunto"
                    variant="outlined"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    placeholder="Ex: Lan√ßamento de novo servi√ßo, Dicas de marketing, etc."
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Palavras-chave"
                    variant="outlined"
                    value={keywords}
                    onChange={(e) => setKeywords(e.target.value)}
                    placeholder="Ex: marketing digital, web3, estrat√©gia, etc."
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="P√∫blico-alvo"
                    variant="outlined"
                    value={targetAudience}
                    onChange={(e) => setTargetAudience(e.target.value)}
                    placeholder="Ex: Empreendedores, Profissionais de marketing, etc."
                  />
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth variant="outlined">
                    <InputLabel>Tamanho do Conte√∫do</InputLabel>
                    <Select
                      value={contentLength}
                      onChange={(e) => setContentLength(e.target.value)}
                      label="Tamanho do Conte√∫do"
                    >
                      <MenuItem value="short">Curto</MenuItem>
                      <MenuItem value="medium">M√©dio</MenuItem>
                      <MenuItem value="long">Longo</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <Button
                    variant="contained"
                    color="primary"
                    fullWidth
                    size="large"
                    startIcon={isGenerating ? <CircularProgress size={20} color="inherit" /> : <RefreshIcon />}
                    onClick={handleGenerateContent}
                    disabled={isGenerating}
                  >
                    {isGenerating ? 'Gerando...' : 'Gerar Conte√∫do'}
                  </Button>
                </Grid>
              </Grid>
            </Grid>
            
            {/* Visualiza√ß√£o do conte√∫do */}
            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6">
                  Conte√∫do Gerado
                </Typography>
                <Box>
                  <IconButton 
                    color="primary" 
                    onClick={handleCopyContent}
                    disabled={!generatedText}
                  >
                    <ContentCopyIcon />
                  </IconButton>
                  <IconButton 
                    color="primary" 
                    onClick={handleDownloadContent}
                    disabled={!generatedText}
                  >
                    <DownloadIcon />
                  </IconButton>
                </Box>
              </Box>
              <ContentPreview>
                {generatedText ? (
                  <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                    {generatedText}
                  </Typography>
                ) : (
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'center', 
                    alignItems: 'center', 
                    height: '100%',
                    minHeight: '200px',
                    color: 'text.secondary'
                  }}>
                    <Typography variant="body1">
                      Configure as op√ß√µes e clique em "Gerar Conte√∫do" para ver o resultado aqui
                    </Typography>
                  </Box>
                )}
              </ContentPreview>
              
              {generatedText && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Hashtags Sugeridas
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    <Chip label="#MarketingDigital" color="primary" variant="outlined" />
                    <Chip label="#FlowOFF" color="primary" variant="outlined" />
                    <Chip label="#Web3" color="primary" variant="outlined" />
                    <Chip label="#Estrat√©gia" color="primary" variant="outlined" />
                    <Chip label="#Flow360" color="primary" variant="outlined" />
                    <Chip label="#Inova√ß√£o" color="primary" variant="outlined" />
                  </Box>
                  
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                    <Button
                      variant="outlined"
                      color="primary"
                      startIcon={<SendIcon />}
                      sx={{ mr: 1 }}
                    >
                      Agendar
                    </Button>
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<SendIcon />}
                    >
                      Publicar
                    </Button>
                  </Box>
                </Box>
              )}
            </Grid>
          </Grid>
        </ContentContainer>
      )}
      
      {tabValue === 1 && (
        <ContentContainer>
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
            <Typography variant="body1" color="text.secondary">
              O hist√≥rico de conte√∫dos gerados ser√° exibido aqui
            </Typography>
          </Box>
        </ContentContainer>
      )}
    </Box>
  );
};

export default ContentGenerator;
